# Include Windows resource and manifest files.
defineTest(tiny_resource_and_manifest) {
    # Relevant for Windows build only
    !win32: return()
    # Relevant for exe or shared library
    !contains(TEMPLATE, ".*(lib|app)"): \
        return()
    # Library archive does not need RC or manifest file
    !CONFIG(shared, dll|shared|static|staticlib): \
    !CONFIG(dll, dll|shared|static|staticlib): \
        return()

    # Path to the resources folder, relative to the currently processed project
    isEmpty(2): resourcesFolder = $$absolute_path(resources, $$_PRO_FILE_PWD_)
    else: resourcesFolder = $$absolute_path($$2)

    # Processing of RC file and manifest file for the test?
    defined(3, var):$$3: isTest = true
    else: isTest = false

    # Target's extension
    contains(TEMPLATE, ".*app"): targetExt = ".exe"
    else:contains(TEMPLATE, ".*lib"): targetExt = ".dll"

    # Windows Resource file
    rcFile = $$tiny_configure_cmake_rc($$resourcesFolder, $$targetExt, $$isTest)

    # Needed in the RC file, MinGW does not define _DEBUG macro
    mingw:CONFIG(debug, debug|release): DEFINES += _DEBUG

    RC_INCLUDEPATH = $$1
    RC_FILE = $$rcFile

    # Manifest file
    CONFIG -= embed_manifest_dll

    # Use the same manifest file for all tests
    $$isTest: manifestBasename = TinyTest
    else: manifestBasename = $$TARGET

    # On MSVC use EMBED and on MinGW injected through the RC file
    !mingw: \
        QMAKE_LFLAGS += \
            /MANIFEST:EMBED \
            /MANIFESTINPUT:$$shell_quote($$shell_path(\
                $$resourcesFolder/$${manifestBasename}$${targetExt}.manifest))

    export(DEFINES)
    export(RC_INCLUDEPATH)
    export(RC_FILE)
    export(CONFIG)
    export(QMAKE_LFLAGS)
}

# Substitute cmake variables in the Windows RC file, is better to reuse existing Windows
# RC file than manage two practically the same files.
defineReplace(tiny_configure_cmake_rc) {
    # All tests use the same test.rc.in file
    defined(3, var):$$3: rcBasename = TinyTest
    else: rcBasename = $$TARGET

    rcFile = $$absolute_path($$1/$${rcBasename}.rc.in)
    exists(rcFile) {
        error( "Windows RC file $$rcFile does not exists, the path passed to the\
                tiny_configure_cmake_rc() was $${1}." )
    }

    # Obtain a full filepath of the Windows RC file
    rcFilename = $$str_member($$rcFile, 0, -4)
    rcFilename = $$basename(rcFilename)
    rcFilepath = $$quote($$OUT_PWD/tmp/$$rcFilename)

    # Generate only one RC file, is not needed to generate for every build pass
    build_pass: return($$rcFilepath)

    tiny_manifest_basename = $$rcBasename

    # The same logic for the substitution token, is 'test' for tests and $$TARGET instead
    token = $$rcBasename

    rcFileContent = $$cat($$rcFile, blob)

    # Support OriginalFilename in the Windows RC file
    load(resolve_target)

    # Substitute Cmake variable values referenced as @VAR@ and also generator expressions
    rcFileContent ~= s/@$${token}_target@/$$TARGET
    rcFileContent ~= s/@tiny_manifest_basename@/$$tiny_manifest_basename
    rcFileContent ~= s/\\$<TARGET_FILE_NAME:$$TARGET>/$$basename(QMAKE_RESOLVED_TARGET)
    rcFileContent ~= s/\\$<TARGET_FILE_SUFFIX:$$TARGET>/$$2

    !write_file($$rcFilepath, rcFileContent) {
        error( "Can not write to the file $${rcFilepath}." )
    }

    return($$rcFilepath)
}
